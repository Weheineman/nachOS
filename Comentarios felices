EJERCICIO 1
- Ver que varios threads que accedan en simultaneo a distintos archivos no se molesten.

EJERCICIO 5
Vamos a tener que implementarnos vectors propios. Vamos a necesitar eso para la tabla de Directory, que ahora tiene que ser extensible (Gracias C++ por no tener un resize de new y delete).
La estructura de directorios para soporte de concurrencia parece bastante similar a los archivos abiertos:
	- Cada thread aporta un incremento al contador de un directorio
	- Para realizar operaciones de directorios (crear, eliminar, moverse) se necesita un acceso a la lista de directorios.
	- Hay algunos caveats a las operaciones. Por ejemplo: Para eliminar un directorio no basta con que ese directorio no esté abierto, sino también no tiene que estar abierto ninguno de sus hijos.
Cosas a implementar como mínimo: mkdir, rmdir, cd. Para cada directorio vamos a necesitar saber su daddy para poder movernos para arriba. Probablemente varias operaciones de OpenFile ahora necesiten saber la posición en el árbol de directorios :)


Roadmap

 - Thread debe conocer su path y tener una interfaz para consultar y modificarlo.

 - exception.cc tiene la implementacion de las syscalls. Hay que modificar dichas
 implementaciones para que no solo pasen el nombre del archivo como argumento a
 las llamadas fileSys, sino que la ruta completa (strconcat?).

 - Hay que implementar cd. Chequear que el directorio destino sea valido.
 No importa si el current directory del thread es invalido.

 - Hay que hacer una estructura DirectoryTree que reemplace completamente a
Directory. No hay problema porque Directory solo se llama desde fileSys.
    Tiene que proveer create, find, delete, list. Y concurrencia.

 - Tener en cuenta que no se rompa freeMap, ojo con los deadlocks, ver ojo arriba.
Seguramente sea bueno garantizar que al modificar directory siempre se tenga
acceso a freeMap previamente y modificar writeAt para que no pida el freeMap en
este caso.


Creamos DirectoryLockManager porque tener locks locales en RAM no arregla
concurrencia en directorios. Es una estructura global que mantiene pares
(sector, RW) e implementa Acquire y Release por sector. El sector es el
sector en disco del fileheader del directorio.
